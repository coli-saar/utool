options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
}

PARSER_BEGIN(DomconOzInputCodec)

package de.saar.chorus.domgraph.codec.domconOz;

import java.io.*;
import java.util.*;

import de.saar.chorus.domgraph.graph.*;
import de.saar.chorus.domgraph.codec.*;



public class DomconOzInputCodec extends InputCodec {
    private DomGraph graph;
    private NodeLabels labels;
  private List<String> termlist;

    public DomconOzInputCodec() {
	this((Reader) null);

	setName("domcon-oz");
	setExtension(".clls");
	termlist = new ArrayList<String>();
    }
    
    public void decode(Reader inputStream, DomGraph graph, NodeLabels labels)
	throws IOException, ParserException, MalformedDomgraphException {

	this.graph = graph;
	this.labels = labels;

	graph.clear();
	labels.clear();
	termlist.clear();

	try {
	    ReInit(inputStream);
	    Input();
	} catch(ParseException e) {
	    e.printStackTrace(System.err);
	    throw new ParserException();
	}
    }



    // graph construction methods

    private String getNode(String nodename) {
	if( !graph.hasNode(nodename) ) {
	    graph.addNode(nodename, new NodeData(NodeType.UNLABELLED, nodename));
	}
	return nodename;
    }

    private String stripquotes(String label) {
	if( label.startsWith("\'") ) {
	    // strip off first and last character
	    return label.substring(1, label.length()-1);
	} else {
	    return label;
	}
    }


}

PARSER_END(DomconOzInputCodec)


/*
 * lexical scanner
 */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <PERCENT_COMMENT: "%" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>  
}

TOKEN :
{
    <LABEL : "label">
 |  <DOM   : "dom">
 |  <OZATOM  : "\'" (~["\'"])* "\'"
  	   | (["a"-"z", "A"-"Z", "0"-"9", "_", "\'", "&"])+>

}




/*
 * grammar
 */

void Input() :
{}
{
    "[" (Atom())+ "]"
}

void Atom() :
{
    Token x,y,f;
}
{
    <DOM> "(" x=<OZATOM> y=<OZATOM> ")"
     { 
	 getNode(x.image);
	 getNode(y.image);
	 graph.addEdge(x.image, y.image, 
		       new EdgeData(EdgeType.DOMINANCE, x.image + "-" + y.image));
	 // System.err.println("dom: " + x.image + " < " + y.image); 
     }

 | <LABEL> "(" x=<OZATOM> f=<OZATOM> [ "(" Termlist() ")"  ] ")"
    {
	getNode(x.image);
	graph.getData(x.image).setType(NodeType.LABELLED);
	labels.addLabel(x.image, stripquotes(f.image));

	for( String child : termlist ) {
	    getNode(child);
	    graph.addEdge(x.image, child,
			  new EdgeData(EdgeType.TREE, x.image + "-" + child));
	}

	termlist.clear();

	/*
	System.err.println("label: " + x.image + " with label " 
			   + stripquotes(f.image)
			   + " and termlist " + termlist); 
	*/
    }
}

void Termlist() :
{
  Token t;
}
{
    (t=<OZATOM> {termlist.add(t.image);})+
}



