options
{
    LOOKAHEAD = 1;
    CHOICE_AMBIGUITY_CHECK = 2;
    OTHER_AMBIGUITY_CHECK = 1;
    STATIC = false;
    USER_TOKEN_MANAGER = false;
    USER_CHAR_STREAM = false;
    UNICODE_INPUT = true;
    
}

PARSER_BEGIN(MrsPrologInputCodec)

package de.saar.chorus.domgraph.codec.mrs;

import java.io.*;
import java.util.*;

import de.saar.chorus.domgraph.graph.DomGraph;
import de.saar.chorus.domgraph.graph.NodeLabels;
import de.saar.chorus.domgraph.codec.*;
import de.saar.chorus.domgraph.codec.mrs.*;

@CodecMetadata(name="mrs-prolog", extension=".mrs.pl")
public class MrsPrologInputCodec extends InputCodec
{
	private Normalisation normalisation;
	private LabelStyle labelStyle;
    private MrsCodec codec;
 
    @CodecConstructor
    public MrsPrologInputCodec(
    	@CodecOption(name="normalisation", defaultValue="nets") Normalisation normalisation,
    	@CodecOption(name="labelStyle", defaultValue="plain") LabelStyle labelStyle)
    {
		this((Reader) null);
		this.normalisation = normalisation;
		this.labelStyle = labelStyle;
    }
    
    public void decode(Reader inputStream, DomGraph graph, NodeLabels labels)
		throws IOException, ParserException, MalformedDomgraphException
    {
		codec = new MrsCodec(graph, labels, normalisation, labelStyle);

		try {
		    ReInit(inputStream);
		    Input();
		} catch(MalformedDomgraphException e) {
			throw e;
		} catch(Throwable e) {
		    throw new ParserException(e);
		}
    }
}

PARSER_END(MrsPrologInputCodec)

//
// Scanner
//

SKIP :
{
    " "
  | "\t"
  | "\n"
  | "\r"
  | <COMMENT: "%" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>  
}

TOKEN :
{
    <PSOA : 
		"psoa">

  | <REL :
		"rel">

  | <ATTRVAL :
		"attrval"> 

  | <HCONS :
		"hcons">

  | <QEQ :
		"qeq" 
      | "geq" >

  | <HANDLE :
		"h" (["0" - "9"])* >

  | <VARIABLE : 
		"x" (["0" - "9"])* >

  | <OTHER : 
	    "e" (["0" - "9"])* 
      | "u" (["0" - "9"])* 
      | "i" (["0" - "9"])* >

  | <SYMBOL :
        "*TOP*"
	  | "\'" (~["\'"])* "\'" >
}

//
// GRAMMAR
//

void Input() throws MalformedDomgraphException: 
{
    String handle;
}
{
    <PSOA> "(" handle = Handle() "," (Other() | Variable()) "," RelList() [ "," QeqList() ] ")"
	{
	    codec.setTopHandleAndFinish(handle);
	}
}

void RelList() throws MalformedDomgraphException:
{
}
{
    "[" [ ( Rel() ) ( "," Rel() )* ] "]"
}

void Rel() throws MalformedDomgraphException:
{
    String label;
    String handle;
    Map<String, String> attrs = new TreeMap<String,String>();
}
{
    <REL> "(" label = Symbol() "," handle = Handle() "," Attributes(attrs) ")"
	{
	    codec.addRelation(handle, label, attrs);
	}
}

void Attributes(Map<String,String> attrs) throws MalformedDomgraphException:
{
}
{
    "[" Attribute(attrs) ( "," Attribute(attrs) )* "]"
}

void Attribute(Map<String,String> attrs) throws MalformedDomgraphException:
{
    String attr;
    String value;
}
{
    <ATTRVAL> "(" attr = Symbol() "," value = Value() ")"
	{
	    attrs.put(attr, value);
	}
}

String Value() throws MalformedDomgraphException:
{
    String v;
}
{
    ( v = Handle() | v = Variable() | v = Other() | v = Symbol() )
	{
	    return v;
	}
}

void QeqList() throws MalformedDomgraphException:
{
}
{
    <HCONS> "(" "[" [ ( Qeq() ) ( "," Qeq() )* ] "]" ")"
}

void Qeq() throws MalformedDomgraphException: 
{
    String h1;
    String h2;
}
{
    <QEQ> "(" h1 = Handle() "," h2 = Handle() ")"
	{
	    codec.addDomEdge(h1, h2);
	}
}

String Handle() throws MalformedDomgraphException:
{
    Token t;
}
{
    t = <HANDLE>
	{	
	    codec.tellHandle(t.image);
	    return t.image;
	}
}

String Variable() throws MalformedDomgraphException:
{
    Token t;
}
{
    t = <VARIABLE> 
	{
	    codec.tellVariable(t.image);
	    return t.image;
	}
}

String Other():
{
    Token t;
}
{
    t = <OTHER>
	{
	    return t.image;
	}
}

String Symbol():
{
    Token t;
}
{
    t = <SYMBOL>
	{
	    // strip quotes if necessary
	    if (t.image.startsWith("\'")) {
			return t.image.substring(1, t.image.length()-1);
	    } else {
			return t.image;
	    }
	}
}
