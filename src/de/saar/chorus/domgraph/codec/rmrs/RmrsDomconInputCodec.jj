options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  UNICODE_INPUT = true;
}

PARSER_BEGIN(RmrsDomconInputCodec)

package de.saar.chorus.domgraph.codec.rmrs;

import java.io.*;
import java.util.*;

import de.saar.chorus.domgraph.graph.*;
import de.saar.chorus.domgraph.codec.*;



/**
 * An input codec for weakly normal dominance constraints in Oz syntax. The
 * inputs that this codec accepts are lists of Oz terms; these terms
 * represent dominance and labelling atoms.<p>
 *
 * An example input looks as follows:<p>
 * <code>[label(x f(y)) dom(y z) label(z a)]</code><p>
 *
 * The dominance constraint represented by the Oz term is read as a
 * weakly normal dominance constraint, i.e. we require that the
 * right-hand sides of dominance atoms are roots, and we assume that
 * there is an implicit inequality atom for each pair of labelled
 * variables.<p>
 *
 * The constraints accepted by this codec are compatible with the
 * old CHORUS demo. A line that starts with a percent sign is
 * interpreted as a comment.
 * 
 * @author Alexander Koller
 *
 */
@CodecMetadata(name="rmrs-domcon", extension=".rmrs", experimental=true)
public class RmrsDomconInputCodec extends InputCodec {
    private DomGraph graph;
    private NodeLabels labels;
    private RmrsInputCodec codec;
 
    @CodecConstructor
    public RmrsDomconInputCodec() {
		this((Reader) null);
    }
    
    public void decode(Reader inputStream, DomGraph graph, NodeLabels labels)
	throws IOException, ParserException, MalformedDomgraphException {
		this.graph = graph;
		this.labels = labels;

		graph.clear();
		labels.clear();
		
		codec = new RmrsInputCodec(graph, labels);

		try {
		    ReInit(inputStream);
	    	Input();
		} catch(Throwable e) {
		    throw new ParserException(e);
		}
		
		codec.makeGraph();
    }


    private String stripquotes(String label) {
		if( label.startsWith("\'") ) {
	    	// strip off first and last character
	    	return label.substring(1, label.length()-1);
		} else {
	    	return label;
		}
    }
    
    

}

PARSER_END(RmrsDomconInputCodec)


/*
 * lexical scanner
 */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <PERCENT_COMMENT: "%" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>  
}

TOKEN :
{
	<EP : "ep">
  | <ARGV : "argv" >
  | <ARGN : "argn" >
  | <QEQ : "qeq" >
  | <EQV : "eqv" >
  | <EQN : "eqn" >
  | <NEQV : "neqv" >
  | <NEQN : "neqn" >
  | <NUMBER : (["0"-"9"])+ >
  | <IDENTIFIER : "\'" (~["\'"])* "\'"
  	   | ["a"-"z"] (["a"-"z", "A"-"Z", "0"-"9", "_"])*>

}




/*
 * grammar
 */

// start symbol: Input
void Input() :
{}
{
  // Input -> [ Atom+ ]
    "[" (Atom())* "]"
}

void Atom() :
{
  Token x,y,i,p,a;
}
{
	<EP> "(" x=<IDENTIFIER> y=<IDENTIFIER> p=<IDENTIFIER> ")"
	{
		codec.addEP(x.image, y.image, p.image);
	}
	
	| <ARGV> "(" x=<IDENTIFIER> i=<NUMBER> a=<IDENTIFIER> ")"
	{
		codec.addArgWithVar(x.image, Integer.parseInt(i.image), a.image);
	}
	
	| <ARGN> "(" x=<IDENTIFIER> i=<NUMBER> a=<IDENTIFIER> ")"
	{
		codec.addArgWithHole(x.image, Integer.parseInt(i.image), a.image);
	}
	
	| <QEQ> "(" x=<IDENTIFIER> y=<IDENTIFIER> ")"
	{
		codec.addQeq(x.image, y.image);
	}
	
	| <EQV> "(" x=<IDENTIFIER> y=<IDENTIFIER> ")"
	{
		codec.addVarEquality(x.image, y.image);
	}
	
	| <EQN> "(" x=<IDENTIFIER> y=<IDENTIFIER> ")"
	{
		codec.addNodeEquality(x.image, y.image);
	}
	
	| <NEQV> "(" x=<IDENTIFIER> y=<IDENTIFIER> ")"
	{
		codec.addVarInequality(x.image, y.image);
	}
	
	| <NEQN> "(" x=<IDENTIFIER> y=<IDENTIFIER> ")"
	{
		codec.addNodeInequality(x.image, y.image);
	}
	
}
