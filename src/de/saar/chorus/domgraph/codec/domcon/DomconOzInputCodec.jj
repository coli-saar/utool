options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
}

PARSER_BEGIN(DomconOzInputCodec)

package de.saar.chorus.domgraph.codec.domcon;

import java.io.*;
import java.util.*;

import de.saar.chorus.domgraph.graph.*;
import de.saar.chorus.domgraph.codec.*;



public class DomconOzInputCodec extends InputCodec {
    private DomGraph graph;
    private NodeLabels labels;
  private List<String> varlist;

    public DomconOzInputCodec() {
	this((Reader) null);

	setName("domcon-oz");
	setExtension(".clls");
	varlist = new ArrayList<String>();
    }
    
    public void decode(Reader inputStream, DomGraph graph, NodeLabels labels)
	throws IOException, ParserException, MalformedDomgraphException {

	this.graph = graph;
	this.labels = labels;

	graph.clear();
	labels.clear();
	varlist.clear();

	try {
	    ReInit(inputStream);
	    Input();
	} catch(ParseException e) {
//	    e.printStackTrace(System.err);
	    throw new ParserException(e);
	}
    }


    private String stripquotes(String label) {
	if( label.startsWith("\'") ) {
	    // strip off first and last character
	    return label.substring(1, label.length()-1);
	} else {
	    return label;
	}
    }


}

PARSER_END(DomconOzInputCodec)


/*
 * lexical scanner
 */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <PERCENT_COMMENT: "%" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>  
}

TOKEN :
{
    <LABEL : "label">
 |  <DOM   : "dom">
 |  <OZATOM  : "\'" (~["\'"])* "\'"
  	   | (["a"-"z", "A"-"Z", "0"-"9", "_", "\'", "&"])+>

}




/*
 * grammar
 */

// start symbol: Input
void Input() :
{}
{
  // Input -> [ Atom+ ]
    "[" (Atom())+ "]"
}

void Atom() :
{
  String x,y;
  Token f;
}
{
  // Atom -> DOM ( Variable Variable )
    <DOM> "(" x=Variable() y=Variable() ")"
     { 
	 graph.addEdge(x, y, 
		       new EdgeData(EdgeType.DOMINANCE, x + "-" + y));
     }


  // Atom -> LABEL ( Variable OZATOM [ ( Varlist ) ] )
 | <LABEL> "(" x=Variable() f=<OZATOM> [ "(" Varlist() ")"  ] ")"
    {
      // INVARIANT: varlist is empty each time we start recognising
      // a labelling atom. It is filled while parsing the Varlist.

	graph.getData(x).setType(NodeType.LABELLED);
	labels.addLabel(x, stripquotes(f.image));

	for( String child : varlist ) {
	    graph.addEdge(x, child,
			  new EdgeData(EdgeType.TREE, x + "-" + child));
	}

	varlist.clear();
    }
}

void Varlist() :
{
  String t;
}
{
  // Varlist -> Variable +
    (t=Variable() {varlist.add(t);})+
}



String Variable() :
{
  Token t;
}
{
  // Variable -> OZATOM
  t=<OZATOM>
  {
    String nodename = stripquotes(t.image);

    if( !graph.hasNode(nodename) ) {
      graph.addNode(nodename, new NodeData(NodeType.UNLABELLED, nodename));
    }

    return nodename;
  }
}
