/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.5";
    LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
	STATIC = false;  
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
  UNICODE_INPUT = true;
  
}

PARSER_BEGIN(RtgParser)
package de.saar.chorus.domgraph.chart.rtgparser;

import java.io.*;
import java.util.*;
import de.saar.chorus.domgraph.chart.*;

public class RtgParser {
	private List<String> lhss;
	private RegularTreeGrammar<StringNonterminal> grammar;
	private Map<String,StringNonterminal> nts;
	
	public RtgParser() {
		this((Reader) null);
		lhss = new ArrayList<String>();
		nts = new HashMap<String,StringNonterminal>();
    }
    
    public RegularTreeGrammar<StringNonterminal> read(Reader reader) throws Exception {
    	grammar = new RegularTreeGrammar<StringNonterminal>();
    	lhss.clear();
    	nts.clear();
    	
    	ReInit(reader);
	    Input();
	    
	    return grammar;
    }  
    
    private StringNonterminal getNT(String name) {
    	if( !nts.containsKey(name) ) {
    		nts.put(name, new StringNonterminal(name));
    	}
    	
    	return nts.get(name);
    }
    
    public static void main(String[] args) throws Exception {
    	RtgParser x = new RtgParser();
    	RegularTreeGrammar<StringNonterminal> g = x.read(new InputStreamReader(System.in));
    	System.out.println(g);
    }
	
	
}
PARSER_END(RtgParser)

SKIP :
{
 	" "
|	"\r"
|	"\t"
|	"\n"
}




TOKEN :
{
    <OPS  : "Ops">
 |  <AUTOMATON : "Automaton">
 |  <FINAL  : "Final">
 |  <STATES   : "States">
 |  <TRANSITIONS    : "Transitions">
 |  <GOESTO   : "->">
 |  <NUMBER : (["0"-"9"])+>
 |  <ID   : ["a"-"z"] (["a"-"z", "A"-"Z", "0"-"9", "_", "\'", "&"])*>
 
}


// start symbol: Input
void Input() : {
}
{
	[<OPS> Operators()] [<AUTOMATON> Auto()] <STATES> States() <FINAL> <STATES> FinalStates() <TRANSITIONS> Transitions()
}

void Operators() : {
}
{
	(<ID> ":" <NUMBER>)+
}


void Auto() : {
	Token t;
}
{
	t = <ID> 
}

void States() : {
	Token t;
}
{
	(t = <ID> [":" <NUMBER>])+
}

void FinalStates() : {
	Token t;
}
{
	(t = <ID> { grammar.addToplevelSubgraph(getNT(t.image)); })+
}
	
void Transitions() : {
	Token label, rhs;
}
{
	(label=<ID>  ((<GOESTO> rhs=<ID>) |	("(" TransitionRhs() ")" <GOESTO> rhs=<ID>)) {
		Split<StringNonterminal> split = new Split<StringNonterminal>(label.image);
		
		for( int i = 0; i < lhss.size(); i++ ) {
			split.addWcc(new Integer(i+1).toString(), getNT(lhss.get(i)));
		}
		
		grammar.addSplit(getNT(rhs.image), split);
		
		if( lhss.isEmpty() ) {
			getNT(rhs.image).setFinal(true);
		}
		
		lhss.clear();
	} ) +
}

void TransitionRhs() : {
	Token t,u;
}
{
	(t=<ID> {lhss.add(t.image);}) ("," u=<ID> {lhss.add(u.image);})*
}
