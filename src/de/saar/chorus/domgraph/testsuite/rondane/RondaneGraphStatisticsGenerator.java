/*
 * @(#)RondaneGraphStatisticsGenerator.java created 26.06.2006
 * 
 * Copyright (c) 2006 Alexander Koller
 *  
 */

package de.saar.chorus.domgraph.testsuite.rondane;

import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Map;
import java.util.Set;

import de.saar.chorus.domgraph.graph.DomGraph;
import de.saar.chorus.domgraph.graph.NodeLabels;

public class RondaneGraphStatisticsGenerator {
    public static void main(String[] args) throws Exception {
        RondaneGraphs graphs = new RondaneGraphs();
        Set<Integer> ids = graphs.getIds();
        
        //PrintWriter writer = new PrintWriter(new OutputStreamWriter(System.out));
        PrintWriter writer = new PrintWriter(new FileWriter("RondaneGraphStatistics.java"));
        
        DomGraph graph = new DomGraph();
        NodeLabels labels = new NodeLabels();
        
        int i = 1;
        
        writer.println("/*");
        writer.println(" * @(#)RondaneGraphStatistics.java");
        writer.println(" *");
        writer.println(" * automatically generated by RondaneGraphStatisticsGenerator");
        writer.println(" *");
        writer.println(" */\n");
        
        writer.println("package de.saar.chorus.domgraph.regression.rondane;");
        writer.println("import java.math.BigInteger;");
        writer.println("import java.util.HashMap;");
        writer.println("import java.util.Map;\n");
        
        writer.println("public class RondaneGraphStatistics extends RondaneGraphStatisticsBase {");
        writer.println("    public RondaneGraphStatistics() {");
        writer.println("        super();");
        writer.println("    }");
        
        for( Integer id : ids ) {
            System.err.println("Processing graph " + id + " (" + (i++) + "/" + ids.size() + ") ...");
            
            graphs.getGraph(id, graph, labels);
            Map<String,Boolean> props = RondaneGraphStatisticsBase.classifyGraph(graph);
            
            writer.println("\n    public void makeGraphData" + id + "() {");
            writer.println("       Map<String,Boolean> props = new HashMap<String,Boolean>();");
            for( String propid : props.keySet() ) {
                writer.println("        props.put(\"" + propid + "\", " + props.get(propid) + ");");
            }
            writer.println("        properties.put(" + id + ", props);");
            
            writer.println("        readings.put(" + id + ", new BigInteger(\""
                    + RondaneGraphStatisticsBase.getNumSolvedForms(graph) + "\"));");
            
            writer.println("    }");
            
            writer.flush();
        }
        
        writer.println("} // class");
        writer.close();
    }

}
