<?xml version="1.0"?>

<project name="lego" default="show-wr-cmd">
  <property name="build" location="../../build" />
  <property name="build.classes" location="${build}/classes" />
  <property name="build.lib" location="${build}/lib" />
  <property name="build.src" location="${build}/src" />

  <property name="source" location="../../src" />

  <!-- Some relative paths to our own Jars and directories. -->
  <property name="coli" value="de/saar/coli" />
  <property name="colitp" value="${coli}/theoremprovers" />

  <property name="techniques" value="edu/mit/techniques" />
  <property name="prologparser" value="nl/uu/smotterl" />

  <!-- *.jar are the relative pathnames to the Jar files.
       *.jar.classes are the patterns for the classes those Jars contain. -->

  <property name="convenientprocess.jar" value="${build.lib}/ConvenientProcess.jar" />
  <property name="convenientprocess.jar.classes" value="${coli}/convenientprocess/*" />

  <property name="colitp.jar" value="${build.lib}/TheoremProvers.jar" />
  <property name="colitp.jar.classes" value="${colitp}/**" />

  <property name="wr.jar" value="${build.lib}/weakestreadings.jar" />
  <property name="wr.jar.classes" value="${coli}/chorus/weakestreadings/*" />

  <property name="techniques.jar" value="${build.lib}/Techniques.jar" />
  <property name="techniques.jar.classes" value="${techniques}/**" />

  <property name="prologparser.jar" value="${build.lib}/Prologparser.jar" />
  <property name="prologparser.jar.classes" value="${prologparser}/*" />


  <property name="testclass.name"
  value="de.saar.coli.chorus.weakestreadings.TestRewritingRules" />



  <!-- Check the rewriting rules for correctness. -->
  <target name="run-wr" depends="weakestreadings">
    <property environment="env" />

    <java fork="yes"
      classname="${testclass.name}">
      <classpath>
	<pathelement path="${wr.jar}" />
	<pathelement path="${colitp.jar}" />
	<pathelement path="${techniques.jar}" />
	<pathelement path="${prologparser.jar}" />
	<pathelement path="${convenientprocess.jar}" />
      </classpath>
      <sysproperty key="spass.bin" value="${env.SPASS}" />
      <sysproperty key="mace.bin" value="${env.MACE}" />
      <arg value="${testclass.name}" />
    </java>
  </target>

  <target name="show-wr-cmd" depends="weakestreadings,delete-old-problems">
    <property environment="env" />
    <echo message="java -cp
    ${wr.jar}:${colitp.jar}:${techniques.jar}:${prologparser.jar}:${convenientprocess.jar}
    -Dspass.bin=${env.SPASS} -Dmace.bin=${env.MACE}
      ${testclass.name} ${testclass.name} piPol" />
  </target>


  <target name="weakestreadings" depends="init,techniques,colitp">
    <javac srcdir="${source}"
           destdir="${build.classes}"
	   debug="true"
           includes="${coli}/chorus/weakestreadings/*.java" />

    <jar jarfile="${wr.jar}"
         basedir="${build.classes}"
         includes="${wr.jar.classes}" />
  </target>


  <target name="delete-old-problems">
    <delete failonerror="false"> <fileset dir="logs" includes="chorusprob.*" /> </delete>
  </target>




  <!-- Classes that call theorem provers -->
  <target name="colitp" depends="init,techniques,prologparser,convenientprocess">
    <javac srcdir="${source}"
           destdir="${build.classes}"
           includes="${colitp}/**/*.java" />

    <jar jarfile="${colitp.jar}"
         basedir="${build.classes}"
         includes="${colitp.jar.classes}" />
  </target>



  <!-- Classes for convenient communication with external processes. -->
  <target name="convenientprocess" depends="init">
    <javac srcdir="${source}"
           destdir="${build.classes}"
           includes="${coli}/convenientprocess/*.java" />

    <jar jarfile="${convenientprocess.jar}"
         basedir="${build.classes}"
         includes="${convenientprocess.jar.classes}" />
  </target>



  <!-- MIT classes for the representation of first-order formulas -->
  <!-- http://www.ai.mit.edu/courses/6.825/project1b/ -->
  <target name="techniques" depends="init">
    <javac srcdir="${source}"
           destdir="${build.classes}"
           includes="${techniques}/**/*.java" />

    <jar jarfile="${techniques.jar}"
         basedir="${build.classes}"
         includes="${techniques.jar.classes}" />
  </target>


  <!-- Otterloo classes for parsing Prolog terms -->
  <!-- http://www.students.cs.uu.nl/~smotterl/prolog -->
  <target name="prologparser" depends="init">
    <javac srcdir="${source}"
           destdir="${build.classes}"
           includes="${prologparser}/*.java" />

    <jar jarfile="${prologparser.jar}"
         basedir="${build.classes}"
         includes="${prologparser.jar.classes}" />
  </target>






  <!-- JAR Unpacking -->

  <!-- Unpack the Jar file at the path "unpack.jar", unless the
       unpacked version is already up to date. Up-to-dateness is
       recorded with a timestamp. "unpack.jar.id" is a unique id for
       this Jar. -->
  <target name="unpack" depends="check.unpack" unless="nobuild.unpack">
    <unjar src="${unpack.jar}" dest="${build.classes}" />
    <touch file="${build.classes}/timestamps-unpackjar/${unpack.jar.id}" />
  </target>

  <target name="check.unpack">
    <uptodate property="nobuild.unpack"
    targetfile="${build.classes}/timestamps-unpackjar/${unpack.jar.id}">
      <srcfiles dir="." includes="${unpack.jar}" />
    </uptodate>
  </target>    




  <!-- Initialization target: Creates basic directory structure -->
  <target name="init">
    <mkdir dir="${build}" />
    <mkdir dir="${build.classes}" />
    <mkdir dir="${build.classes}/timestamps-unpackjar" />
    <mkdir dir="${build.lib}" />
    <mkdir dir="${build.src}" />
  </target>

  <!-- Delete all compiled files -->
  <target name="clean">
     <delete dir="${build}"/>
  </target>

  <!-- Generate the DTD -->
  <target name="dtd">
     <antstructure output="ant.dtd" />
  </target>
</project>
