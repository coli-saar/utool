<?xml version="1.0"?>

<project name="domgraph" default="utool">
	<!-- the main paths -->
	<property name="prefix" location="../.." />
	
	<property name="build" location="${prefix}/build" />
	<property name="source" location="${prefix}/src" />
	<property name="packages" location="${prefix}/packages" />
	<property name="doc.api" location="${prefix}/docs/api" />

	<property name="build.classes" location="${build}/classes" />
	<property name="build.lib" location="${build}/lib" />

	<!-- tools we use for compiling -->
	<property name="javacchome" location="${packages}/javacc-4.0" />
	<property name="testng.jar" value="${packages}/testng-4.6.1/testng-4.6.1-jdk15.jar" />
	
	
	<!-- included Jars and the classes they unpack to -->
	<property name="jgrapht.jar" location="${packages}/jgrapht-0.6.0/jgrapht-0.6.0.jar" />
	<property name="jgrapht.unpacked.classes" value="org/_3pq/jgrapht/**" />

	<property name="getopt.jar" location="${packages}/java-getopt-1.0.9.jar" />
	<property name="getopt.unpacked.classes" value="gnu/getopt/*"/>

	<property name="itext.jar" location="${packages}/itext-1.3.1.jar" />
	<property name="itext.unpacked.classes" value="com/lowagie/**" />



	<property name="coli" value="de/saar" />
	<property name="chorus" value="de/saar/chorus" />
	
	<property name="domgraph.properties" value="${source}/${chorus}/domgraph/domgraph.properties" />
	<property file="${domgraph.properties}" />


	<!-- file sets -->
	<property name="domgraph.jar" value="${build.lib}/Utool-full-${domgraph.version}.jar" />
	<property name="domgraph-compact.jar" value="${build.lib}/Utool-${domgraph.version}.jar" />
	<property name="domgraph.jar.classes" value="${chorus}/domgraph/**,${coli}/getopt/*,${coli}/basic/*" />
	<property name="domgraph.allsourcefiles" value="${chorus}/domgraph/**/*.java, ${chorus}/domgraph/**/*.jj, ${chorus}/domgraph/**/*.properties, ${coli}/basic/*.java, ${coli}/getopt/*.java" />

	<!-- parameters for the distribution -->
	<property name="domgraph-dist.jar" value="${build.lib}/Utool-src-${domgraph.version}.jar" />
	<property name="distribution.exclude" value="" />
	
	



	<!-- Jars -->
	<target name="utool-compact" depends="compile-all">
		<classfileset id="domgraph.required.classes" dir="${build.classes}">
			<root classname="de.saar.chorus.domgraph.utool.Utool" />
			<exclude name="**/*$UnitTests.class" />	
		</classfileset>
				
		<jar jarfile="${domgraph-compact.jar}">
			<fileset refid="domgraph.required.classes" />
			<fileset dir="${build.classes}" includes="**/*.properties" />

			<manifest>
				<attribute name="Main-Class" value="de.saar.chorus.domgraph.utool.Utool" />
			</manifest>
		</jar>
	</target>
	
	<target name="utool" depends="compile-all">
		<jar jarfile="${domgraph.jar}"
		             basedir="${build.classes}"
	         includes="${domgraph.jar.classes},${jgrapht.unpacked.classes},
								   ${getopt.unpacked.classes},${itext.unpacked.classes}"
					excludes="**/*$UnitTests.class"
			>
					<manifest>
						<attribute name="Main-Class"
		                           value="de.saar.chorus.domgraph.utool.Utool" />
					</manifest>
				</jar>
	</target>
	
	
	<target name="compile-all" depends="init,domconOz.javacc,holesemComsem.javacc,mrs.javacc,glue.javacc,jgrapht.unpacked,itext.unpacked,getopt.unpacked">
		<javac srcdir="${source}"
               destdir="${build.classes}"
               debug="true"
               includes="${domgraph.allsourcefiles}"
               excludes="**/Test*.java"
               source="1.5">

			<classpath>
				<pathelement path="${build.classes}" />
				<pathelement path="${testng.jar}" />
			</classpath>
		</javac>

		<copy file="${domgraph.properties}" todir="${build.classes}/${chorus}/domgraph/" />

	</target>



	<target name="dist" depends="compile-all">
		<copy todir="tmp_Domgraph/src">
			<fileset dir="${source}" includes="${domgraph.allsourcefiles}" excludes="${distribution.exclude}" />
			<fileset dir="${source}" includes="${prefix}/*.properties" excludes="${distribution.exclude}" />
		</copy>


		<copy todir="tmp_Domgraph/projects/Domgraph">
			<fileset dir="${prefix}/projects/Domgraph/" includes="**/*" excludes="tmp_Domgraph/**,${distribution.exclude}" />
		</copy>
		
		<copy todir="tmp_Domgraph">
			<fileset dir="${prefix}" includes="packages/javacc-4.0/**, packages/testng-4.6.1/**" />
		</copy>


		<jar jarfile="${domgraph-dist.jar}"
             basedir="${build.classes}"
             includes="${domgraph.jar.classes},${jgrapht.unpacked.classes},${getopt.unpacked.classes},${itext.unpacked.classes}"
					excludes="**/*$UnitTests.class">

			<manifest>
				<attribute name="Main-Class" value="de.saar.chorus.domgraph.utool.Utool" />
			</manifest>

			<fileset dir="tmp_Domgraph/"/>
		</jar>

		<delete dir="tmp_Domgraph/" />
	</target>


	
	<!-- JavaCC -->
	<target name="domconOz.javacc">
		<javacc 
			javacchome="${javacchome}" 
			target="${source}/${chorus}/domgraph/codec/domcon/DomconOzInputCodec.jj" />
	</target>

	<target name="holesemComsem.javacc">
		<javacc 
			javacchome="${javacchome}" 
			target="${source}/${chorus}/domgraph/codec/holesem/HolesemComsemInputCodec.jj" />
	</target>

        <target name="mrs.javacc">
                <javacc 
                        javacchome="${javacchome}" 
                        target="${source}/${chorus}/domgraph/codec/mrs/MrsPrologInputCodec.jj" />
        </target>

    <target name="glue.javacc">
            <javacc 
                    javacchome="${javacchome}" 
                    target="${source}/${chorus}/domgraph/codec/glue/GlueInputCodec.jj" />
    </target>

	<!-- JAR Unpacking -->

	<!-- Unpack the Jar file at the path "unpack.jar", unless the
	       unpacked version is already up to date. Up-to-dateness is
	       recorded with a timestamp. "unpack.jar.id" is a unique id for
	       this Jar. -->
	<target name="unpack" depends="check.unpack" unless="nobuild.unpack">
		<unjar src="${unpack.jar}" dest="${build.classes}" />
		<touch file="${build.classes}/timestamps-unpackjar/${unpack.jar.id}" />
	</target>

	<target name="check.unpack">
		<uptodate property="nobuild.unpack"
	    targetfile="${build.classes}/timestamps-unpackjar/${unpack.jar.id}">
			<srcfiles dir="." includes="${unpack.jar}" />
		</uptodate>
	</target>

	<target name="jgrapht.unpacked" depends="init" if="jgrapht.jar.present">
		<antcall target="unpack" >
			<param name="unpack.jar" value="${jgrapht.jar}" />
			<param name="unpack.jar.id" value="jgrapht" />
		</antcall>
	</target>

	<target name="getopt.unpacked" depends="init" if="getopt.jar.present">
		<antcall target="unpack">
			<param name="unpack.jar" value="${getopt.jar}" />
			<param name="unpack.jar.id" value="getopt" />
		</antcall>
	</target>

	<target name="itext.unpacked" depends="init" if="itext.jar.present">
		<antcall target="unpack">
			<param name="unpack.jar" value="${itext.jar}" />
			<param name="unpack.jar.id" value="itext" />
		</antcall>
	</target>


	<!-- Javadoc -->

	<target name="javadoc" depends="compile-all">
		<javadoc destdir="${doc.api}" 
			access="public"
			noqualifier="all"
			>
			<fileset dir="${source}" includes="${domgraph.allsourcefiles}" excludes="**/*.jj, **/*.properties"/>
			<classpath>
				<pathelement path="${build.classes}" />
				<pathelement path="${testng.jar}" />
			</classpath>
		</javadoc>
	</target>


	<!-- Init -->

	<target name="init">
		<mkdir dir="${build}" />
		<mkdir dir="${build.classes}" />
		<mkdir dir="${build.classes}/timestamps-unpackjar" />
		<mkdir dir="${build.lib}" />
		<mkdir dir="${doc.api}" />

		<available file="${jgrapht.jar}" property="jgrapht.jar.present"/>
		<available file="${jgraphaddons.jar}" property="jgraphaddons.jar.present"/>
		<available file="${getopt.jar}" property="getopt.jar.present"/>
		<available file="${itext.jar}" property="itext.jar.present"/>
	</target>

	<!-- Delete all compiled files -->
	<target name="clean" depends="init">
		<delete>
			<fileset dir="${build.classes}" includes="${domgraph.jar.classes}" />
			<fileset dir="${build.lib}" />
			<fileset dir="${doc.api}" />
		</delete>
	</target>
	
	<target name="veryclean">
		<delete dir="${build}" />
		<delete dir="${doc.api}" />
	</target>
	
	
	<target name="prepare" depends="init">
		<copy todir="${build.classes}">
			<fileset dir="${prefix}" excludes="projects/**,META-INF/**,*.jar, build/**, src/**, packages/**"/>
		</copy>
		
		<delete>
			<fileset dir="${prefix}" excludes="projects/**, *.jar, build/**, src/**, packages/**"/>
		</delete>
		
		<antcall target="clean" />
	</target>
</project>
