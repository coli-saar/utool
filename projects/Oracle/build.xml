<?xml version="1.0"?>

<project name="oracle" default="sxdg-oracle">
  <property name="build" location="../../build" />
  <property name="build.classes" location="${build}/classes" />
  <property name="build.lib" location="${build}/lib" />
  <property name="build.src" location="${build}/src" />

  <property name="reports.tests" location="../../testreports" />

  <property name="doc.api" location="../../docs/api" />
  <property name="source" location="../../src" />
  <property name="testsource" location="${source}/test" />
  <property name="packages" location="../../packages" />

  <property name="coli" value="de/saar/coli" />
  <property name="chorus" value="de/saar/coli/chorus" />



  <!-- add project-specific properties here -->

  <property name="oracle.jar" value="${build.lib}/Oracle.jar" />
  <property name="oracle.jar.classes" value="${chorus}/oracle/*" />
  <property name="dummy-oracle.jar" value="${build.lib}/DummyOracle.jar" />
  <property name="sxdg-oracle.jar" value="${build.lib}/SxdgOracle.jar" />


  <property name="electric.unpacked.classes" value="electric/**" />
  <property name="electric.jar" value="${packages}/EXML.jar" />

  <property name="junit.jar" value="${packages}/junit.jar" />


  <!-- Jars -->
  <target name="oracle" depends="init">
    <javac srcdir="${source}"
           destdir="${build.classes}"
           includes="${chorus}/oracle/*.java"
	   excludes="**/Test*.java"
	   source="1.5"
	   >
     <classpath>
	<pathelement path="${electric.jar}" />
     </classpath>
    </javac>

    <jar jarfile="${oracle.jar}"
         basedir="${build.classes}"
         includes="${chorus}/oracle/*"
	 excludes="**/Test*.class" />
  </target>

  <target name="dummy-oracle" depends="oracle,electric.unpacked">
    <javac srcdir="${source}"
           destdir="${build.classes}"
           includes="${chorus}/oracle/dummy/*.java"
	   excludes="**/Test*.java"
	   source="1.5"
	/>

    <jar jarfile="${dummy-oracle.jar}"
         basedir="${build.classes}"
         includes="${chorus}/oracle/dummy/*,${oracle.jar.classes},${electric.unpacked.classes}"
	 excludes="**/Test*.class" >
      <manifest>
        <attribute name="Main-Class" value="de.saar.coli.chorus.oracle.dummy.Main" />
      </manifest>
    </jar>

  </target>


  <target name="sxdg-oracle" depends="oracle,electric.unpacked">
    <javac srcdir="${source}"
           destdir="${build.classes}"
           includes="${chorus}/oracle/sxdg/*.java"
	   excludes="**/Test*.java"
	   source="1.5"
	/>

    <jar jarfile="${sxdg-oracle.jar}"
         basedir="${build.classes}"
         includes="${chorus}/oracle/sxdg/*,${oracle.jar.classes},${electric.unpacked.classes}"
	 excludes="**/Test*.class" >
      <manifest>
        <attribute name="Main-Class" value="de.saar.coli.chorus.oracle.sxdg.Main" />
      </manifest>
    </jar>

  </target>
  



  <!-- JUnit -->
  <!-- We need to compile the tests and the program separately so it
  also works on installations that don't have junit. -->
  
  <target name="oracle-compile-tests" depends="oracle">
    <javac srcdir="${source}"
           destdir="${build.classes}"
	   includes="${chorus}/oracle/Test*.java"
	   source="1.5">
      <classpath>
        <pathelement path="${electric.jar}" />
	<pathelement path="${oracle.jar}" />
	<pathelement path="${junit.jar}" />
      </classpath>
    </javac>
  </target>
    
  <target name="oracle-run-tests" depends="oracle-compile-tests">
    <junit > <!--  printsummary="yes" -->
      <classpath>
        <pathelement path="${oracle.jar}" />
	<pathelement path="${build.classes}" />
	<pathelement path="${junit.jar}" />
	<pathelement path="${electric.jar}" />
      </classpath>

      <formatter type="plain" />

      <batchtest todir="${reports.tests}">
        <fileset dir="${build.classes}">
	  <include name="${chorus}/oracle/Test*.class" />
	  <exclude name="**/*$*"/>
	  <exclude name="**/*+*"/>
	</fileset>
      </batchtest>
    </junit>
  </target>


  <target name="sxdg-oracle-compile-tests" depends="sxdg-oracle">
    <javac srcdir="${source}"
           destdir="${build.classes}"
	   includes="${chorus}/oracle/sxdg/Test*.java"
	   source="1.5">
      <classpath>
        <pathelement path="${electric.jar}" />
	<pathelement path="${oracle.jar}" />
	<pathelement path="${sxdg-oracle.jar}" />
	<pathelement path="${junit.jar}" />
      </classpath>
    </javac>
  </target>
    
  <target name="sxdg-oracle-run-tests" depends="sxdg-oracle-compile-tests">
    <junit > <!--  printsummary="yes" -->
      <classpath>
	<pathelement path="${sxdg-oracle.jar}" />
        <pathelement path="${oracle.jar}" />
	<pathelement path="${build.classes}" />
	<pathelement path="${junit.jar}" />
	<pathelement path="${electric.jar}" />
      </classpath>

      <formatter type="plain" />

      <batchtest todir="${reports.tests}">
        <fileset dir="${build.classes}">
	  <include name="${chorus}/oracle/sxdg/Test*.class" />
	  <exclude name="**/*$*"/>
	  <exclude name="**/*+*"/>
	</fileset>
      </batchtest>
    </junit>
  </target>



  <!-- Doc -->
  <target name="oracle.doc" depends="oracle">
    <javadoc sourcepath="${source}" destdir="${doc.api}" Private="true"
    packagenames="de.saar.coli.chorus.corpus.oracle.*" />
  </target>





  <!-- JAR Unpacking -->

  <!-- Unpack the Jar file at the path "unpack.jar", unless the
       unpacked version is already up to date. Up-to-dateness is
       recorded with a timestamp. "unpack.jar.id" is a unique id for
       this Jar. -->
  <target name="unpack" depends="check.unpack" unless="nobuild.unpack">
    <unjar src="${unpack.jar}" dest="${build.classes}" />
    <touch file="${build.classes}/timestamps-unpackjar/${unpack.jar.id}" />
  </target>

  <target name="check.unpack">
    <uptodate property="nobuild.unpack"
    targetfile="${build.classes}/timestamps-unpackjar/${unpack.jar.id}">
      <srcfiles dir="." includes="${unpack.jar}" />
    </uptodate>
  </target>    

  <target name="electric.unpacked" depends="init">
    <antcall target="unpack">
      <param name="unpack.jar" value="${electric.jar}" />
      <param name="unpack.jar.id" value="electric" />
    </antcall>
  </target>



  <!-- Init -->

  <target name="init">
    <mkdir dir="${build}" />
    <mkdir dir="${build.classes}" />
    <mkdir dir="${build.classes}/timestamps-unpackjar" />
    <mkdir dir="${build.lib}" />
    <mkdir dir="${build.src}" />

    <mkdir dir="${reports.tests}" />

    <mkdir dir="${doc.api}" />
  </target>

  <!-- Delete all compiled files -->
  <target name="clean">
     <delete dir="${build}"/>
     <delete dir="${doc.api}"/>
  </target>

  <!-- Generate the DTD -->
  <target name="dtd">
     <antstructure output="ant.dtd" />
  </target>

</project>




<!--

In order to run the tests (i.e. target `oracle-run-tests'), you need 
to have JUnit in your classpath. If you have a properly installed
JUnit (e.g. from the Debian package), you don't need to do 
anything. Otherwise, you can use the JUnit in 
packages/junit/junit.jar. In this case, you must call ant as 
follows:

  CLASSPATH=packages/junit/junit.jar:$CLASSPATH ant -f Buildfiles/oracle.xml oracle-run-tests

(or just put it in your CLASSPATH globally)

-->